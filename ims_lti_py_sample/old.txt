__author__ = 'anna'
import views.py
@csrf_exempt
def add_problem(request):
    print "Add problem session"
    session = request.session

    url=Headers.objects.get('url')
    public_key='E5IFLfKuxNdhLKh+tLRN'
    private_key='0/e10IAyBE1VkqtK+8PzPh2ViXVl5us1Zrj2rYQs'

    params = {}
    found=False
    for g in Post.objects.all():
        params[g.key]= g.value
        #print g.key
        #print g.key+"   "+g.value

    #print params['user_id']
    #print params['roles']
    #print params['tool_consumer_instance_guid']
    if 'Instructor' in params['roles']:
        print "This is an Instructor"



    if session['LTI_POST']:
        try:




            headers = {
            'Date'          : format_date_time(mktime(datetime.now().timetuple())),
            'Host'          : 'assessments-dev.mit.edu',
            'Accept'        : 'application/json',
            'X-Api-Key'     : public_key,
            'X-Api-Proxy'   : 'taaccct_instructor',
            }
            #modified_headers = deepcopy(headers)

            if 'Instructor' in params['roles']:
                lti_headers = ['request-line','accept','date','host','x-api-proxy']
            else:
                lti_headers = ['request-line','accept','date','host','x-api-proxy',
                               'lti-user-id','lti-tool-consumer-instance-guid','lti-user-role','lti-bank']

                headers['LTI-User-ID'] =                     params['user_id']
                headers['LTI-Tool-Consumer-Instance-GUID'] = params['tool_consumer_instance_guid']
                headers['LTI-User-Role'] =                   params['roles']
                headers['LTI-Bank'] ='assessment.Bank%3A53cec85833bb72730f66da92%40birdland.mit.edu'

            auth = HTTPSignatureAuth(key_id=public_key,
                                     secret=private_key,
                                     algorithm='hmac-sha256',
                                     headers=lti_headers)

            Headers(key='headers', value=headers).save()
            Headers(key='auth', value=auth)
            #Headers(key='modified_headers',value=modified_headers).save()

            eq = requests.get(url+"/assessment/banks/", auth=auth, headers=headers)
            print "Request status code "
            print eq.status_code
            #print "Response"+ eq.text
            #print eq.json()
            res = eq.json()

            data = res['data']
            print "\nNumber of banks:"
            print len(data)

            '''''''''''''''''''''''''''''''''
            Search for bank Ortho 3D
            and save bank id in Headers

            '''''''''''''''''''''''''''''''''
            for a in data:
                if a['displayName']['text']=="Ortho 3D":
                    print "Found Ortho 3D"
                    bank_id=urllib.unquote(a['id'])
                    found = True
                    print bank_id
                    Headers(key='bank_id', value=bank_id).save()

            if found:
                '''
                Get a list assessments in a bank
                assessment/banks/<bank_id>/assessments
                '''
                eq2=requests.get(url+"/assessment/banks/"+bank_id+"/assessments/", auth=auth, headers=headers)
                print eq2.status_code
                assessments = eq2.json()['data']
                print "Number of assessments: "+str(len(assessments))
                for a in assessments:
                    print a['displayName']['text']  # Assessment name
                '''
                Get a list of items in a bank
                '''
                eq3=requests.get(url+"/assessment/banks/"+bank_id+"/items/", auth=auth, headers=headers)
                print eq3.status_code
                print eq3.text
                items = eq3.json()['data']
                for a in items:
                    print a['displayName']['text']

                return render_to_response("ims_lti_py_sample/instructor.html",
                                          RequestContext(request,{'assessments': assessments,'items': items}))
            else:
                print "No bank Ortho 3D found"


            request_post = pickle.loads(session['LTI_POST'])
            #print request_post
            #role=request_post['role']
            #print "\n Role"+role

            request_post['lis_outcome_service_url'] = fix_url(request_post['lis_outcome_service_url'])
            #print "printing request "+request_post
            consumer_key = settings.CONSUMER_KEY
            secret = settings.LTI_SECRET

            tool = DjangoToolProvider(consumer_key, secret, request_post)
            post_result = tool.post_replace_result(.32) #{'message_identifier':'edX_fix'}
            print post_result.is_success()
            return render_to_response("ims_lti_py_sample/index.html",  RequestContext(request))
        except KeyError, e:
            return render_to_response("ims_lti_py_sample/error.html",  RequestContext(request))
'''
@csrf_exempt
def assessment_items(request,sub_id):
    #for g in Post.objects.all():
     #   params[g.key]= g.value

    headers=Headers.objects.all()
    h={}
    for i in headers:
        h[i.key]=i.value

    bank_id = h['bank_id']
    print bank_id
    eq=requests.post(h['url']+"/assessment/banks/"+bank_id+"/assessments/"+sub_id+"/items", auth=h['auth'], headers=headers)
    print "send request for items in an assessments"
    print eq.text

    return render_to_response("ims_lti_py_sample/index.html",  RequestContext(request))

'''


@csrf_exempt
def ViewAssessments(request):
    print "Student view"
    params={}
    for g in Post.objects.all():
        params[g.key] = g.value
    headers = {
            'Date'          : format_date_time(mktime(datetime.now().timetuple())),
            'Host'          : 'assessments-dev.mit.edu',
            'Accept'        : 'application/json',
            'X-Api-Key'     : settings.PUBLIC_KEY,
            'X-Api-Proxy'   : 'taaccct_instructor',
            }


    lti_headers = ['request-line','accept','date','host','x-api-proxy',
                               'lti-user-id','lti-tool-consumer-instance-guid','lti-user-role','lti-bank']

    headers['LTI-User-ID'] =                     params['user_id']
    headers['LTI-Tool-Consumer-Instance-GUID'] = params['tool_consumer_instance_guid']
    headers['LTI-User-Role'] =                   params['roles']
    headers['LTI-Bank'] ='assessment.Bank%3A53cec85833bb72730f66da92%40birdland.mit.edu'


    auth = HTTPSignatureAuth(key_id=settings.PUBLIC_KEY,
                                     secret=settings.PRIVATE_KEY,
                                     algorithm='hmac-sha256',
                                     headers=lti_headers)

    Headers(key='headers', value=headers).save()
    Headers(key='auth', value=auth).save()


def fix_url(str):
    if settings.LTI_URL_FIX:
        for old,new in settings.LTI_URL_FIX.iteritems():
            if str.find(old) == 0:
                return u"{}{}".format( new , str[len(old):])
    return str
